// Author: Pasindu Wijesena
// Attainable Score: 100

#include <bits/stdc++.h>
using namespace std;

#define rep(a, b) for (int a = 0; a < (b); a++)
#define rep2(a, b, c) for (int a = (b); a < (c); a++)
#define gcd(a, b) __gcd(a, b)
#define bitCount(a) __builtin_popcount(a)

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

template <typename... T>
void rd(T &...args) {
  ((cin >> args), ...);
}  // Read standard input

const ll MOD = 1e9 + 7;

ll getSum(int R, int C, vector<vector<ll>> &SA, int row1, int col1, int row2,
          int col2) {
  if (row2 >= R) return 0;
  if (col2 >= C) return 0;
  if (row1 < 0) return 0;
  if (col1 < 0) return 0;

  ll sum = SA[row2][col2];
  if (row1 > 0) {
    sum -= SA[row1 - 1][col2];
  }
  if (col1 > 0) {
    sum -= SA[row2][col1 - 1];
  }
  if (row1 > 0 && col1 > 0) {
    sum += SA[row1 - 1][col1 - 1];
  }

  return sum;
}

ll bestV(int R, int C, vector<vector<ll>> &A, int width1, int height1,
         int width2, int height2) {
  vector<ll> DP_VERT(C, 0);

  rep(x, C - width1) {
    if (x > 0) {
      DP_VERT[x] = max(DP_VERT[x - 1], DP_VERT[x]);  // initialize
    }
    rep(y, R) {
      ll sum = getSum(R, C, A, y, x, y + height1 - 1, x + width1 - 1);
      DP_VERT[x] = max(DP_VERT[x], sum);
    }
  }

  // cout << "VERT " << width1 << ' ' << height1 << endl;
  // rep(i, C) cout << DP_VERT[i] << ' ';
  // cout << endl;

  ll solution = 0;
  rep2(x, width1, C) {
    rep(y, R) {
      ll sum = getSum(R, C, A, y, x, y + height2 - 1, x + width2 - 1) +
               DP_VERT[x - width1];
      solution = max(solution, sum);
    }
  }
  // cout << solution << endl;
  return solution;
}

ll bestH(int R, int C, vector<vector<ll>> &A, int width1, int height1,
         int width2, int height2) {
  vector<ll> DP_HORZ(R, 0);

  rep(y, R - height1) {
    if (y > 0) {
      DP_HORZ[y] = max(DP_HORZ[y - 1], DP_HORZ[y]);
    }
    rep(x, C) {
      ll sum = getSum(R, C, A, y, x, y + height1 - 1, x + width1 - 1);
      DP_HORZ[y] = max(DP_HORZ[y], sum);
    }
  }

  ll solution = 0;
  rep2(y, height1, R) {
    rep(x, C) {
      ll sum = getSum(R, C, A, y, x, y + height2 - 1, x + width2 - 1) +
               DP_HORZ[y - height1];
      solution = max(solution, sum);
    }
  }
  return solution;
}

bool solve() {
  int R, C, X, Y;
  rd(R, C, X, Y);
  vector<vector<ll>> A(R, vector<ll>(C));
  rep(i, R) rep(j, C) rd(A[i][j]);
  // build sa
  rep2(i, 1, R) A[i][0] += A[i - 1][0];
  rep2(i, 1, C) A[0][i] += A[0][i - 1];
  rep2(i, 1, R) rep2(j, 1, C) {
    A[i][j] += A[i - 1][j] + A[i][j - 1] - A[i - 1][j - 1];
  }

  // rep(i, R) {
  //   rep(j, C) cout << A[i][j] << '\t';
  //   cout << endl;
  // }

  ll res = 0;
  int options[] = {X, Y};
  rep(i, 2) rep(j, 2) {
    res = max(res, bestV(R, C, A, options[i], options[(i + 1) % 2], options[j],
                         options[(j + 1) % 2]));
    res = max(res, bestH(R, C, A, options[i], options[(i + 1) % 2], options[j],
                         options[(j + 1) % 2]));
  }
  cout << res << endl;
  return true;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int T = 1;

  rep(i, T) {
    // cout<<"Case #"<<i+1<<": ";
    solve();
    // bool result = solve();
    // if(result) cout<<"YES"<<endl;
    // else cout<<"NO"<<endl;
  }

  return 0;
}
